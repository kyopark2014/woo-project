이제 파일 내용을 확인했으니, 지급 거래집계 조회 API에 대한 테스트 케이스를 작성하겠습니다.

# 지급 거래집계 조회 API (공통API) 테스트 케이스

## 기본 정보
- **End Point**: /common-api/v1/gives/{giveId}/tx-summaries
- **Path Parameters**: giveId (지급 번호)
- **설명**: 지급 거래집계 정보를 조회하는 API

## 테스트 케이스

### 테스트 케이스 1: 정상적인 지급 번호로 조회
**목적**: 유효한 지급 번호로 거래집계 정보가 정상적으로 조회되는지 확인

**입력**:
- Path Parameter: giveId = 유효한 지급 번호 (예: 12345)

**예상 결과**:
- HTTP 상태 코드: 200 OK
- 응답 본문: 해당 지급 번호에 대한 거래집계 정보가 포함된 JSON 객체
- 필수 필드(txDate, settleCode, serviceType, giveCycleCode, customerNo, baseAmount, txResultAmount 등)가 모두 존재

**검증 항목**:
- 응답 데이터의 구조가 API 명세와 일치하는지 확인
- 필수 필드가 모두 존재하고 올바른 타입인지 확인
- 금액 관련 필드(baseAmount, txResultAmount 등)가 숫자 형식인지 확인

### 테스트 케이스 2: 할인이 없는 거래의 정산기준조정금액 확인
**목적**: 할인이 없는 거래에서 정산기준조정금액(adjustAmounts) 필드가 올바르게 표시되는지 확인

**입력**:
- Path Parameter: giveId = 할인이 없는 거래의 지급 번호

**예상 결과**:
- HTTP 상태 코드: 200 OK
- adjustAmounts 배열이 비어있거나 존재하지 않음
- transactionAmounts에 ORDER_AMOUNT(주문금액)와 BARO_DELIVERYTIP(가게배달팁) 항목이 존재

**검증 항목**:
- transactionAmounts 배열에 ORDER_AMOUNT 항목이 있고 금액이 정확한지 확인
- transactionAmounts 배열에 BARO_DELIVERYTIP 항목이 있고 금액이 정확한지 확인
- adjustAmounts 배열이 비어있거나 존재하지 않는지 확인

### 테스트 케이스 3: 배민 부담 가게배달팁이 있는 거래의 정산기준조정금액 확인
**목적**: 배민 부담 가게배달팁이 있는 거래에서 정산기준조정금액(adjustAmounts) 필드가 올바르게 표시되는지 확인

**입력**:
- Path Parameter: giveId = 배민 부담 가게배달팁이 있는 거래의 지급 번호

**예상 결과**:
- HTTP 상태 코드: 200 OK
- adjustAmounts 배열에 BARO_WOOWABROS_CHARGE_DELIVERY_TIP 코드를 가진 항목이 존재
- transactionAmounts에 ORDER_AMOUNT(주문금액) 항목만 존재하고 BARO_DELIVERYTIP(가게배달팁) 항목은 없음

**검증 항목**:
- adjustAmounts 배열에 BARO_WOOWABROS_CHARGE_DELIVERY_TIP 코드를 가진 항목이 있는지 확인
- BARO_WOOWABROS_CHARGE_DELIVERY_TIP 항목의 amount, supplyAmount, vat 값이 예상대로인지 확인
- transactionAmounts 배열에 ORDER_AMOUNT 항목만 있고 BARO_DELIVERYTIP 항목이 없는지 확인

### 테스트 케이스 4: 존재하지 않는 지급 번호로 조회
**목적**: 존재하지 않는 지급 번호로 조회 시 적절한 오류 응답이 반환되는지 확인

**입력**:
- Path Parameter: giveId = 존재하지 않는 지급 번호 (예: 99999999)

**예상 결과**:
- HTTP 상태 코드: 404 Not Found 또는 적절한 오류 코드
- 오류 메시지가 포함된 응답 본문

**검증 항목**:
- 적절한 오류 상태 코드가 반환되는지 확인
- 오류 메시지가 명확하게 제공되는지 확인

### 테스트 케이스 5: 권한이 없는 사용자의 조회 요청
**목적**: 권한이 없는 사용자가 API를 호출할 때 적절한 오류 응답이 반환되는지 확인

**입력**:
- Path Parameter: giveId = 유효한 지급 번호
- 인증 헤더: 권한이 없는 사용자의 토큰 또는 인증 정보 없음

**예상 결과**:
- HTTP 상태 코드: 401 Unauthorized 또는 403 Forbidden
- 권한 관련 오류 메시지가 포함된 응답 본문

**검증 항목**:
- 적절한 오류 상태 코드가 반환되는지 확인
- 권한 관련 오류 메시지가 명확하게 제공되는지 확인

### 테스트 케이스 6: 정산기준금액과 정산예정금액의 계산 검증
**목적**: 정산기준금액(baseAmount)과 정산예정금액(txResultAmount)이 올바르게 계산되는지 확인

**입력**:
- Path Parameter: giveId = 유효한 지급 번호

**예상 결과**:
- HTTP 상태 코드: 200 OK
- baseAmount와 txResultAmount 필드가 존재하고 올바른 값을 가짐

**검증 항목**:
- baseAmount가 transactionAmounts와 adjustAmounts의 합과 일치하는지 확인
- txResultAmount가 baseAmount에서 수수료(feeAmounts)를 차감한 값과 일치하는지 확인
- 배민 부담 가게배달팁이 있는 경우, 정산기준금액에 해당 금액이 포함되어 있는지 확인

### 테스트 케이스 7: 다양한 수수료 항목 확인
**목적**: 다양한 수수료 항목(feeAmounts)이 올바르게 표시되는지 확인

**입력**:
- Path Parameter: giveId = 다양한 수수료가 적용된 거래의 지급 번호

**예상 결과**:
- HTTP 상태 코드: 200 OK
- feeAmounts 배열에 다양한 수수료 항목이 존재

**검증 항목**:
- feeAmounts 배열에 예상되는 수수료 항목(SERVICE_FEE, BROKERAGE_FEE 등)이 있는지 확인
- 각 수수료 항목의 supplyAmount와 vat 값이 예상대로인지 확인
- 수수료 합계가 정산기준금액과 정산예정금액의 차이와 일치하는지 확인

### 테스트 케이스 8: 결제수단별 금액 확인
**목적**: 결제수단별 금액(payMethodAmounts)이 올바르게 표시되는지 확인

**입력**:
- Path Parameter: giveId = 다양한 결제수단이 사용된 거래의 지급 번호

**예상 결과**:
- HTTP 상태 코드: 200 OK
- payMethodAmounts 배열에 다양한 결제수단 항목이 존재

**검증 항목**:
- payMethodAmounts 배열에 예상되는 결제수단 항목이 있는지 확인
- 각 결제수단 항목의 supplyAmount, vat, salesScaleFee 값이 예상대로인지 확인
- 결제수단별 금액의 합계가 정산기준금액과 일치하는지 확인

이상의 테스트 케이스를 통해 지급 거래집계 조회 API의 기능과 정확성을 검증할 수 있습니다. 특히 배민 부담 가게배달팁 관련 항목이 정산기준조정금액에 올바르게 반영되는지 중점적으로 확인해야 합니다.
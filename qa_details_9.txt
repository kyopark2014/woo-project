파일 내용을 확인했습니다. 이제 주문 내역 V2 - 셀프서비스(주문) API에 대한 테스트 케이스를 작성하겠습니다.

# 주문 내역 V2 - 셀프서비스(주문) API 테스트 케이스

## 테스트 케이스 1: 기본 주문 조회 기능 검증

**목적**: 주문 내역 V2 API의 기본 조회 기능이 정상적으로 작동하는지 확인

**선행 조건**:
- 유효한 주문번호가 존재함
- API 호출 권한이 있음

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[유효한_주문번호]`
2. 응답 상태 코드 확인

**예상 결과**:
- 응답 상태 코드: 200 OK
- 응답 본문에 주문 정보가 포함됨
- `items` 배열에 주문 정보가 포함됨

**후행 조건**: 없음

## 테스트 케이스 2: 할인 없는 주문 정보 검증

**목적**: 할인이 없는 일반 주문의 정보가 올바르게 표시되는지 확인

**선행 조건**:
- 할인이 적용되지 않은 주문이 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[할인없는_주문번호]`
2. 응답 데이터 구조 및 값 확인

**예상 결과**:
- `items[].orderBrokerageAmount`: 10,000원 (주문금액)
- `items[].orderBrokerageItems`: 주문금액 항목 포함
  - `code`: "ORDER_AMOUNT"
  - `amount`: 10,000
- `items[].deliveryItemAmount`: 3,000원 (가게배달팁)
- `items[].deliveryItems`: 배달 관련 항목 포함
  - `code`: "DELIVERY_TIP_AMOUNT"
  - `name`: "가게배달팁"
  - `amount`: 3,000
- `baroWoowabrosChargeDelivertyTip` 항목이 없거나 값이 0

**후행 조건**: 없음

## 테스트 케이스 3: 배민 부담 가게배달팁이 있는 주문 정보 검증

**목적**: HVA 배달팁 할인(배민 부담 가게배달팁)이 적용된 주문의 정보가 올바르게 표시되는지 확인

**선행 조건**:
- 배민 부담 가게배달팁이 적용된 주문이 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[배달팁할인_주문번호]`
2. 응답 데이터 구조 및 값 확인

**예상 결과**:
- `items[].orderBrokerageAmount`: 10,000원 (주문금액)
- `items[].orderBrokerageItems`: 주문금액 항목 포함
  - `code`: "ORDER_AMOUNT"
  - `amount`: 10,000
- `items[].deliveryItemAmount`: 3,000원 (배민 부담 가게배달팁)
- `items[].deliveryItems`: 배달 관련 항목 포함
  - `code`: "BARO_WOOWABROS_CHARGE_DELIVERY_TIP"
  - `name`: "배민 부담 가게배달팁"
  - `amount`: 3,000

**후행 조건**: 없음

## 테스트 케이스 4: 여러 주문번호 동시 조회

**목적**: 여러 주문번호를 동시에 조회할 때 API가 정상적으로 작동하는지 확인

**선행 조건**:
- 여러 개의 유효한 주문번호가 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[주문번호1,주문번호2,주문번호3]`
2. 응답 데이터 구조 및 값 확인

**예상 결과**:
- `items` 배열에 요청한 모든 주문번호에 대한 정보가 포함됨
- 각 주문별로 올바른 정보가 표시됨

**후행 조건**: 없음

## 테스트 케이스 5: 존재하지 않는 주문번호 조회

**목적**: 존재하지 않는 주문번호로 조회 시 API의 오류 처리가 적절한지 확인

**선행 조건**: 없음

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[존재하지_않는_주문번호]`
2. 응답 상태 코드 및 오류 메시지 확인

**예상 결과**:
- 적절한 오류 상태 코드 반환 (예: 404 Not Found)
- 오류 메시지에 주문을 찾을 수 없다는 내용 포함

**후행 조건**: 없음

## 테스트 케이스 6: 배민 부담 가게배달팁과 일반 가게배달팁이 혼합된 주문 조회

**목적**: 배민 부담 가게배달팁과 일반 가게배달팁이 모두 포함된 주문의 정보가 올바르게 표시되는지 확인

**선행 조건**:
- 배민 부담 가게배달팁과 일반 가게배달팁이 모두 포함된 주문이 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[혼합_주문번호]`
2. 응답 데이터 구조 및 값 확인

**예상 결과**:
- `items[].deliveryItems`에 두 가지 배달팁 항목이 모두 포함됨
  - `code`: "DELIVERY_TIP_AMOUNT", `name`: "가게배달팁"
  - `code`: "BARO_WOOWABROS_CHARGE_DELIVERY_TIP", `name`: "배민 부담 가게배달팁"
- 각 항목의 금액이 올바르게 표시됨

**후행 조건**: 없음

## 테스트 케이스 7: 정산예정금액 계산 검증

**목적**: 배민 부담 가게배달팁이 정산예정금액에 올바르게 반영되는지 확인

**선행 조건**:
- 배민 부담 가게배달팁이 적용된 주문이 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[배달팁할인_주문번호]`
2. 응답의 정산예정금액 확인

**예상 결과**:
- `items[].depositDueAmount`(입금예정금액)가 배민 부담 가게배달팁을 포함하여 올바르게 계산됨
- 정산예정금액 = 정산기준금액(13,000) - 결제정산수수료(429) = 12,571

**후행 조건**: 없음

## 테스트 케이스 8: 권한 없는 사용자의 API 접근

**목적**: 권한이 없는 사용자가 API에 접근할 때 적절한 오류 처리가 이루어지는지 확인

**선행 조건**: 없음

**테스트 단계**:
1. 인증 토큰 없이 API 엔드포인트 호출: `/api/v2/orders?orderNos=[유효한_주문번호]`
2. 응답 상태 코드 및 오류 메시지 확인

**예상 결과**:
- 적절한 오류 상태 코드 반환 (예: 401 Unauthorized)
- 인증 관련 오류 메시지 포함

**후행 조건**: 없음

## 테스트 케이스 9: 잘못된 형식의 주문번호 조회

**목적**: 잘못된 형식의 주문번호로 조회 시 API의 오류 처리가 적절한지 확인

**선행 조건**: 없음

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[잘못된_형식의_주문번호]`
2. 응답 상태 코드 및 오류 메시지 확인

**예상 결과**:
- 적절한 오류 상태 코드 반환 (예: 400 Bad Request)
- 주문번호 형식이 잘못되었다는 오류 메시지 포함

**후행 조건**: 없음

## 테스트 케이스 10: 대량 주문번호 조회 성능

**목적**: 대량의 주문번호를 조회할 때 API의 성능을 확인

**선행 조건**:
- 다수의 유효한 주문번호가 존재함

**테스트 단계**:
1. API 엔드포인트 호출: `/api/v2/orders?orderNos=[다수의_주문번호]` (최대 허용 개수까지)
2. 응답 시간 및 데이터 정확성 확인

**예상 결과**:
- 응답 시간이 허용 가능한 범위 내에 있음
- 모든 주문 정보가 정확하게 반환됨

**후행 조건**: 없음
이제 파일 내용을 확인했으니, 요청하신 정산예정금액 계산API에 대한 테스트 케이스를 작성하겠습니다.

# 정산예정금액 계산API 테스트 케이스

## API 정보
- **End Point**: `/common-api/v1/calculate/tx-result-amount/{serviceTxNo}`
- **Request Parameters**: 
  - serviceTxNo (필수): 주문번호
  - txDate (필수): 거래일자
  - amountType (필수): 거래타입 (PLUS, MINUS, PARTIAL_MINUS)
  - billingCancelTradeNo (선택): 부분취소번호 (부분취소인 경우 필수)
  - billingServiceCancelNo (선택): 빌링취소번호 (부분취소인 경우 필수)

## 테스트 케이스

### 테스트 케이스 1: 일반 결제 주문 정산예정금액 계산
**목적**: 할인이 없는 일반 결제 주문의 정산예정금액이 정확히 계산되는지 확인

**입력값**:
- serviceTxNo: "ORDER123456"
- txDate: "2025-03-15"
- amountType: "PLUS"

**예상 결과**:
- 응답 코드: 200 OK
- 정산예정금액(txResultAmount): 12,571원 (주문금액 10,000원 + 가게배달팁 3,000원 - 결제정산수수료 429원)

**검증 포인트**:
- 정산기준금액이 13,000원(주문금액 10,000원 + 가게배달팁 3,000원)으로 계산되는지 확인
- 결제정산수수료가 정확히 계산되는지 확인
- 최종 정산예정금액이 12,571원으로 계산되는지 확인

### 테스트 케이스 2: 배민 부담 가게배달팁이 있는 주문 정산예정금액 계산
**목적**: 배민 부담 가게배달팁이 포함된 주문의 정산예정금액이 정확히 계산되는지 확인

**입력값**:
- serviceTxNo: "ORDER789012"
- txDate: "2025-03-15"
- amountType: "PLUS"

**예상 결과**:
- 응답 코드: 200 OK
- 정산예정금액(txResultAmount): 12,571원 (주문금액 10,000원 + 배민 부담 가게배달팁 3,000원 - 결제정산수수료 429원)

**검증 포인트**:
- 정산기준금액이 13,000원(주문금액 10,000원 + 배민 부담 가게배달팁 3,000원)으로 계산되는지 확인
- 배민 부담 가게배달팁이 정산기준조정금액에 정확히 반영되는지 확인
- 결제정산수수료가 정확히 계산되는지 확인
- 최종 정산예정금액이 12,571원으로 계산되는지 확인

### 테스트 케이스 3: 주문 취소 시 정산예정금액 계산
**목적**: 주문 취소 시 정산예정금액이 정확히 계산되는지 확인

**입력값**:
- serviceTxNo: "ORDER789012"
- txDate: "2025-03-15"
- amountType: "MINUS"

**예상 결과**:
- 응답 코드: 200 OK
- 정산예정금액(txResultAmount): -12,571원 (취소된 금액의 음수값)

**검증 포인트**:
- 취소된 주문의 정산예정금액이 원래 정산예정금액의 음수값으로 계산되는지 확인
- 배민 부담 가게배달팁이 있는 주문 취소 시에도 정확히 계산되는지 확인

### 테스트 케이스 4: 부분 취소 시 정산예정금액 계산
**목적**: 부분 취소 시 정산예정금액이 정확히 계산되는지 확인

**입력값**:
- serviceTxNo: "ORDER789012"
- txDate: "2025-03-15"
- amountType: "PARTIAL_MINUS"
- billingCancelTradeNo: "CANCEL123456"
- billingServiceCancelNo: "BILLING123456"

**예상 결과**:
- 응답 코드: 200 OK
- 정산예정금액(txResultAmount): -6,285원 (부분 취소된 금액의 음수값)

**검증 포인트**:
- 부분 취소된 주문의 정산예정금액이 취소 비율에 맞게 계산되는지 확인
- billingCancelTradeNo와 billingServiceCancelNo 파라미터가 정확히 처리되는지 확인
- 배민 부담 가게배달팁이 있는 주문의 부분 취소 시에도 정확히 계산되는지 확인

### 테스트 케이스 5: 필수 파라미터 누락 시 오류 처리
**목적**: 필수 파라미터가 누락된 경우 적절한 오류 응답을 반환하는지 확인

**입력값**:
- serviceTxNo: "ORDER123456"
- txDate: (누락)
- amountType: "PLUS"

**예상 결과**:
- 응답 코드: 400 Bad Request
- 오류 메시지: txDate 파라미터가 필요하다는 내용의 메시지

**검증 포인트**:
- 필수 파라미터 누락 시 적절한 오류 코드와 메시지를 반환하는지 확인

### 테스트 케이스 6: 부분 취소 시 필수 파라미터 누락 오류 처리
**목적**: 부분 취소 시 필요한 파라미터가 누락된 경우 적절한 오류 응답을 반환하는지 확인

**입력값**:
- serviceTxNo: "ORDER789012"
- txDate: "2025-03-15"
- amountType: "PARTIAL_MINUS"
- billingCancelTradeNo: (누락)
- billingServiceCancelNo: "BILLING123456"

**예상 결과**:
- 응답 코드: 400 Bad Request
- 오류 메시지: billingCancelTradeNo 파라미터가 필요하다는 내용의 메시지

**검증 포인트**:
- 부분 취소 시 필수 파라미터 누락 시 적절한 오류 코드와 메시지를 반환하는지 확인

### 테스트 케이스 7: 존재하지 않는 주문번호로 요청 시 오류 처리
**목적**: 존재하지 않는 주문번호로 요청 시 적절한 오류 응답을 반환하는지 확인

**입력값**:
- serviceTxNo: "NONEXISTENT123"
- txDate: "2025-03-15"
- amountType: "PLUS"

**예상 결과**:
- 응답 코드: 404 Not Found
- 오류 메시지: 해당 주문을 찾을 수 없다는 내용의 메시지

**검증 포인트**:
- 존재하지 않는 주문번호로 요청 시 적절한 오류 코드와 메시지를 반환하는지 확인

### 테스트 케이스 8: 정산시스템에 데이터가 존재하는 경우 서비스유형에 따른 계산
**목적**: 정산시스템에 데이터가 존재하는 경우 서비스유형(배달의민족/배민1)에 따라 정산예정금액이 정확히 계산되는지 확인

**입력값**:
- serviceTxNo: "ORDER123456" (배달의민족 서비스)
- txDate: "2025-03-15"
- amountType: "PLUS"

**예상 결과**:
- 응답 코드: 200 OK
- 정산예정금액: 정산 내 tx_item.txResultAmount - 광고관리의 중개이용료 및 부가세

**검증 포인트**:
- 배달의민족 서비스인 경우 정산예정금액이 "정산 내 tx_item.txResultAmount - 광고관리의 중개이용료 및 부가세"로 계산되는지 확인
- 배민1 서비스인 경우 정산예정금액이 "정산 내 tx_item.txResultAmount"로 계산되는지 확인

## 결론

위 테스트 케이스들은 정산예정금액 계산API의 다양한 시나리오를 검증합니다. 특히 배민 부담 가게배달팁이 정산기준조정금액에 정확히 반영되는지 확인하는 것이 중요합니다. 또한 결제, 취소, 부분취소 등 다양한 거래 타입에 따라 정산예정금액이 정확히 계산되는지 검증합니다. 오류 처리 케이스도 포함하여 API의 견고성을 확인합니다.
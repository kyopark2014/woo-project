이제 파일 내용을 확인했으니, 지급내역 조회 V2 (공통API)에 대한 테스트 케이스를 작성하겠습니다.

# 지급내역 조회 V2 (공통API) 테스트 케이스

## 기본 정보
- **End Point**: /common-api/v2/customers/{customerNo}/gives
- **Path Parameters**: customerNo (거래처번호)
- **Request Parameters**: 
  - depositDueStartDate (지급예정일 시작일자)
  - depositDueEndDate (지급예정일 종료일자)
  - settleCodes (정산유형코드 목록)
- **Response**: 정산기준조정금액 등 지급 관련 정보

## 테스트 케이스

### 테스트 케이스 1: 기본 파라미터 검증
**설명**: 필수 파라미터 검증
**단계**:
1. customerNo 없이 API 호출
2. depositDueStartDate 없이 API 호출
3. depositDueEndDate 없이 API 호출
4. 모든 필수 파라미터를 포함하여 API 호출

**예상 결과**:
- 1~3: 적절한 오류 메시지와 함께 실패 응답
- 4: 성공 응답

### 테스트 케이스 2: 날짜 범위 검증
**설명**: 지급예정일 날짜 범위 검증
**단계**:
1. 3개월 이상의 날짜 범위로 API 호출 (depositDueStartDate와 depositDueEndDate 간격이 3개월 이상)
2. 종료일이 시작일보다 이전인 경우 API 호출
3. 유효한 날짜 범위(3개월 미만)로 API 호출

**예상 결과**:
- 1: "조회기간은 최대 3개월 미만입니다" 오류 메시지
- 2: "종료일은 시작일 이후여야 합니다" 오류 메시지
- 3: 성공 응답

### 테스트 케이스 3: 할인 없는 거래 조회
**설명**: 할인이 없는 일반 거래 조회
**단계**:
1. 할인이 없는 거래가 있는 기간으로 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 할인 없는 거래가 있는 기간의 시작일
   - depositDueEndDate: 할인 없는 거래가 있는 기간의 종료일
   - settleCodes: 관련 정산유형코드

**예상 결과**:
- 성공 응답
- 응답에 다음 데이터 포함:
  - orderAmount: 13,000 (주문금액 10,000 + 가게배달팁 3,000)
  - deductAmount: 0 (정산기준조정금액)
  - baseAmount: 13,000 (정산기준금액)
  - feeSum: 390 (결제정산수수료 공급가액)
  - vat: 39 (결제정산수수료 부가세)
  - txAmount: 13,000 (거래금액)
  - txResultAmount: 12,571 (거래결과금액)

### 테스트 케이스 4: 배민 부담 가게배달팁이 있는 거래 조회
**설명**: 배민 부담 가게배달팁이 포함된 거래 조회
**단계**:
1. 배민 부담 가게배달팁이 있는 거래가 있는 기간으로 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 배민 부담 가게배달팁 거래가 있는 기간의 시작일
   - depositDueEndDate: 배민 부담 가게배달팁 거래가 있는 기간의 종료일
   - settleCodes: 관련 정산유형코드

**예상 결과**:
- 성공 응답
- 응답에 다음 데이터 포함:
  - orderAmount: 10,000 (주문금액)
  - deductAmount: 3,000 (정산기준조정금액 - 배민 부담 가게배달팁)
  - baseAmount: 13,000 (정산기준금액)
  - feeSum: 390 (결제정산수수료 공급가액)
  - vat: 39 (결제정산수수료 부가세)
  - txAmount: 10,000 (거래금액)
  - txResultAmount: 12,571 (거래결과금액)

### 테스트 케이스 5: 여러 정산유형코드로 조회
**설명**: 여러 정산유형코드를 사용하여 거래 조회
**단계**:
1. 여러 정산유형코드를 포함하여 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 유효한 시작일
   - depositDueEndDate: 유효한 종료일
   - settleCodes: 여러 정산유형코드 (예: FOOD, BAEMIN1)

**예상 결과**:
- 성공 응답
- 응답에 지정된 모든 정산유형코드에 해당하는 거래 데이터 포함

### 테스트 케이스 6: 정산유형코드 없이 조회
**설명**: 정산유형코드를 지정하지 않고 모든 거래 조회
**단계**:
1. settleCodes 파라미터 없이 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 유효한 시작일
   - depositDueEndDate: 유효한 종료일

**예상 결과**:
- 성공 응답
- 응답에 모든 정산유형코드에 해당하는 거래 데이터 포함

### 테스트 케이스 7: 존재하지 않는 거래처번호로 조회
**설명**: 존재하지 않는 거래처번호로 API 호출
**단계**:
1. 존재하지 않는 거래처번호로 API 호출
   - customerNo: 존재하지 않는 거래처번호
   - depositDueStartDate: 유효한 시작일
   - depositDueEndDate: 유효한 종료일
   - settleCodes: 유효한 정산유형코드

**예상 결과**:
- 적절한 오류 메시지와 함께 실패 응답 또는 빈 결과 목록

### 테스트 케이스 8: 거래가 없는 기간으로 조회
**설명**: 거래가 없는 기간으로 API 호출
**단계**:
1. 거래가 없는 기간으로 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 거래가 없는 기간의 시작일
   - depositDueEndDate: 거래가 없는 기간의 종료일
   - settleCodes: 유효한 정산유형코드

**예상 결과**:
- 성공 응답
- 빈 결과 목록 또는 거래 데이터가 없음을 나타내는 응답

### 테스트 케이스 9: 정산기준조정금액 계산 검증
**설명**: 정산기준조정금액(deductAmount) 계산 로직 검증
**단계**:
1. 다양한 조정 항목이 포함된 거래가 있는 기간으로 API 호출
   - 사장님부담 쿠폰이 있는 거래
   - 메뉴할인지원이 있는 거래
   - 배민 부담 가게배달팁이 있는 거래
   - 위 항목이 모두 포함된 거래

**예상 결과**:
- 성공 응답
- 각 거래에 대해 정산기준조정금액(deductAmount)이 사장님부담 쿠폰 + 메뉴할인지원 + 배민 부담 가게배달팁의 합계와 일치

### 테스트 케이스 10: 응답 데이터 형식 검증
**설명**: 응답 데이터의 형식 및 필드 검증
**단계**:
1. 유효한 파라미터로 API 호출
   - customerNo: 유효한 거래처번호
   - depositDueStartDate: 유효한 시작일
   - depositDueEndDate: 유효한 종료일
   - settleCodes: 유효한 정산유형코드

**예상 결과**:
- 성공 응답
- 응답에 문서에 명시된 모든 필드가 포함되어 있음
- 각 필드의 데이터 타입이 문서와 일치함

## 결론

위 테스트 케이스들은 지급내역 조회 V2 API의 다양한 측면을 검증합니다. 특히 배민 부담 가게배달팁이 정산기준조정금액(deductAmount)에 올바르게 반영되는지 확인하는 데 중점을 두었습니다. 이 테스트 케이스들을 통해 API가 요구사항에 맞게 정확히 동작하는지 검증할 수 있습니다.
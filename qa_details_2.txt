이제 파일 내용을 확인했으니, 요청하신 "지급내역 조회 V2 (공통API)"에 대한 테스트 케이스를 작성하겠습니다.

# 지급내역 조회 V2 (공통API) 테스트 케이스

## 개요
- **End Point**: /common-api/v2/customers/{customerNo}/gives
- **Path Parameters**: customerNo (거래처번호)
- **Request Parameters**: depositDueStartDate, depositDueEndDate, settleCodes

## 테스트 케이스

### 테스트 케이스 1: 기본 파라미터 검증
**목적**: 필수 파라미터 검증 및 유효성 확인

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-01 | 모든 필수 파라미터 입력 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 성공적인 응답(200 OK) | 기본 정상 케이스 |
| TC-02 | customerNo 누락 | depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | Path Parameter 누락 |
| TC-03 | depositDueStartDate 누락 | customerNo: 유효한 값<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | 필수 파라미터 누락 |
| TC-04 | depositDueEndDate 누락 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | 필수 파라미터 누락 |
| TC-05 | settleCodes 누락 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜 | 오류 응답(400 Bad Request) | 필수 파라미터 누락 |

### 테스트 케이스 2: 날짜 범위 검증
**목적**: 날짜 범위 제한 및 유효성 확인

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-06 | 유효한 날짜 범위(3개월 미만) | customerNo: 유효한 값<br>depositDueStartDate: 현재 날짜 - 2개월<br>depositDueEndDate: 현재 날짜<br>settleCodes: 유효한 값 | 성공적인 응답(200 OK) | 유효한 날짜 범위 |
| TC-07 | 유효하지 않은 날짜 범위(3개월 이상) | customerNo: 유효한 값<br>depositDueStartDate: 현재 날짜 - 4개월<br>depositDueEndDate: 현재 날짜<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | 조회기간 초과 |
| TC-08 | 시작일이 종료일보다 늦은 경우 | customerNo: 유효한 값<br>depositDueStartDate: 현재 날짜<br>depositDueEndDate: 현재 날짜 - 1개월<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | 날짜 범위 오류 |
| TC-09 | 유효하지 않은 날짜 형식 | customerNo: 유효한 값<br>depositDueStartDate: "2025/04/01"<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 오류 응답(400 Bad Request) | 날짜 형식 오류 |

### 테스트 케이스 3: 정산유형코드(settleCodes) 검증
**목적**: 정산유형코드 유효성 확인

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-10 | 유효한 단일 정산유형코드 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: "FOOD" | 성공적인 응답(200 OK) | 단일 코드 |
| TC-11 | 유효한 다중 정산유형코드 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: ["FOOD", "BAEMIN1"] | 성공적인 응답(200 OK) | 다중 코드 |
| TC-12 | 유효하지 않은 정산유형코드 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: "INVALID_CODE" | 오류 응답(400 Bad Request) | 유효하지 않은 코드 |
| TC-13 | 빈 정산유형코드 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: "" | 모든 정산유형 결과 반환 | 빈 값은 전체 조회 |

### 테스트 케이스 4: 응답 데이터 검증
**목적**: 응답 데이터 구조 및 내용 검증

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-14 | 할인 없는 거래 조회 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | orderAmount: 13,000<br>deductAmount: 0<br>baseAmount: 13,000<br>txAmount: 13,000<br>txResultAmount: 12,571 | 할인 없는 케이스 |
| TC-15 | 배민 부담 가게배달팁 있는 거래 조회 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | orderAmount: 10,000<br>deductAmount: 3,000<br>baseAmount: 13,000<br>txAmount: 10,000<br>txResultAmount: 12,571 | 배민 부담 가게배달팁 케이스 |
| TC-16 | 결과 없는 조회 | customerNo: 존재하지 않는 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 빈 결과 배열 | 데이터 없음 |

### 테스트 케이스 5: 정산기준조정금액(deductAmount) 검증
**목적**: 정산기준조정금액 계산 로직 검증

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-17 | 사장님부담쿠폰만 있는 경우 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | deductAmount: 쿠폰 금액 | 사장님부담쿠폰 반영 |
| TC-18 | 메뉴할인지원만 있는 경우 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | deductAmount: 메뉴할인지원 금액 | 메뉴할인지원 반영 |
| TC-19 | 배민 부담 가게배달팁만 있는 경우 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | deductAmount: 배민 부담 가게배달팁 금액 | 배민 부담 가게배달팁 반영 |
| TC-20 | 모든 조정금액 항목이 있는 경우 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | deductAmount: 사장님부담쿠폰 + 메뉴할인지원 + 배민 부담 가게배달팁 | 모든 항목 합산 |

### 테스트 케이스 6: 성능 및 페이징 검증
**목적**: 대량 데이터 조회 시 성능 및 페이징 검증

| 테스트 ID | 테스트 시나리오 | 입력 데이터 | 예상 결과 | 비고 |
|-----------|----------------|------------|-----------|------|
| TC-21 | 대량 데이터 조회 | customerNo: 많은 거래가 있는 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값 | 성공적인 응답(200 OK)<br>응답 시간 < 3초 | 성능 테스트 |
| TC-22 | 페이징 처리 검증 | customerNo: 유효한 값<br>depositDueStartDate: 유효한 날짜<br>depositDueEndDate: 유효한 날짜<br>settleCodes: 유효한 값<br>page: 1<br>size: 10 | 성공적인 응답(200 OK)<br>최대 10개 결과 | 페이징 검증 |

## 결론

위 테스트 케이스들은 지급내역 조회 V2 API의 다양한 측면을 검증합니다:
1. 필수 파라미터 검증
2. 날짜 범위 제한 검증
3. 정산유형코드 유효성 검증
4. 응답 데이터 구조 및 내용 검증
5. 정산기준조정금액 계산 로직 검증
6. 성능 및 페이징 검증

특히 배민 부담 가게배달팁(HVA 배달팁 할인)이 정산기준조정금액(deductAmount)에 올바르게 반영되는지 중점적으로 검증합니다. 이는 API 문서에 명시된 작업사항에 따라 "사장님부담쿠폰 + 메뉴할인지원 + 배민 부담 가게배달팁"이 모두 정산기준조정금액에 포함되어야 함을 확인하는 것입니다.